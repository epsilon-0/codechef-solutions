#include<cstdio>
#include<iostream>
#include<vector>
#include<cstring>
#include<algorithm>
#include<numeric>
#include<stack>
#include<set>
#include<map>
#include<queue>
#include<deque>
#include<list>
#include<climits>
#include<cstdlib>
#include<string>
#include<cmath>

using namespace std;

#define eps 1e-19
#define rev(s,e) reverse(s,e)
#define mset(s,i) memset(s,i,sizeof(s))
#define cpy(i,j) memset(i,j,sizeof(j))
#define mp(x,y) make_pair(x,y)
#define ff first
#define ss second
#define ld long double
#define li long int
#define lli long long int
#define pb(x) push_back(x)
#define f(i,a,b) for(int i=a;i<b;i++)
#define fr(i,a,b) for(int i=a;i>b;i--)

const int inf=1000000007;
const int MAX=300000;

int pa[MAX],rk[MAX],tcnt[MAX];

// initializer
void init(int n){
  int i;
  f(i,0,n){
    pa[i]=i;
    tcnt[i]=1;
    rk[i]=0;
  }
}

int find(int x){
  int a=x;
  while(pa[a]!=a){
    a=pa[a]; // keep on travelling up the tree
  }
  int b=x,c;
  /// compress the path from x to a
  while(pa[b]!=a){
    c=pa[b];
    pa[b]=a;
    b=c;
  }
  return a;
}

void funion(int x,int y){
  int ax=find(x);
  int ay=find(y);
  if(ax!=ay){
    if(rk[ax]>rk[ay]){
      swap(ax,ay);
    }
    if(rk[ax]==rk[ay]){
      rk[ax]++;
    }
    pa[ay]=ax;
    tcnt[ax]+=tcnt[ay];
  }
}

int main(){
  
}
